'use client';

import { motion } from 'framer-motion';
import { Hotel, Utensils, ArrowRight, ArrowLeft } from 'lucide-react';
import Card3D from '@/components/ui/Card3D';
import Button from '@/components/ui/Button';

interface FoodStayProps {
  data: {
    accommodation?: string[];
    food_style?: string[];
  };
  onChange: (field: string, value: unknown) => void;
  onNext: () => void;
  onBack: () => void;
  lang: 'en' | 'si';
}

const accommodations = [
  { value: 'hotels', icon: 'Hotel', en: 'Hotels', si: '‡∑Ñ‡∑ù‡∂ß‡∂Ω‡∑ä' },
  { value: 'guesthouses', icon: 'Home', en: 'Guesthouses', si: '‡∂ú‡∑ô‡∑É‡∑ä‡∂ß‡∑ä ‡∑Ñ‡∑Ä‡∑î‡∑É‡∑ä' },
  { value: 'homestays', icon: 'Home', en: 'Homestays', si: '‡∂±‡∑í‡∑Ä‡∑è‡∑É ‡∂±‡∑Ä‡∑è‡∂≠‡∑ê‡∂±‡∑ä' },
  { value: 'camping', icon: 'Tent', en: 'Camping', si: '‡∂ö‡∂≥‡∑Ä‡∑î‡∂ª‡∑î ‡∂∂‡∑ê‡∂≥‡∑ì‡∂∏' },
  {
    value: 'luxury',
    icon: 'Gem',
    en: 'Luxury resorts',
    si: '‡∑É‡∑î‡∂õ‡∑ù‡∂¥‡∂∑‡∑ù‡∂ú‡∑ì ‡∂±‡∑í‡∑Ä‡∑è‡∂©‡∑î ‡∂±‡∑í‡∂ö‡∑ö‡∂≠‡∂±',
  },
  {
    value: 'budget',
    icon: 'DollarSign',
    en: 'Budget stays',
    si: '‡∂Ö‡∂©‡∑î ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä ‡∂±‡∑Ä‡∑è‡∂≠‡∑ê‡∂±‡∑ä',
  },
];

const foodStyles = [
  {
    value: 'rice_curry',
    icon: 'UtensilsCrossed',
    en: 'Rice & curry',
    si: '‡∂∂‡∂≠‡∑ä ‡∑É‡∑Ñ ‡∑Ä‡∑ä‚Äç‡∂∫‡∂Ç‡∂¢‡∂±',
  },
  {
    value: 'street_food',
    icon: 'Utensils',
    en: 'Street food',
    si: '‡∑Ä‡∑ì‡∂Ø‡∑í ‡∂Ü‡∑Ñ‡∑è‡∂ª',
  },
  { value: 'seafood', icon: 'Fish', en: 'Seafood', si: '‡∂∏‡∑î‡∑Ñ‡∑î‡∂Ø‡∑î ‡∂Ü‡∑Ñ‡∑è‡∂ª' },
  { value: 'fast_food', icon: 'Beef', en: 'Fast food', si: '‡∂ö‡∑ä‡∑Ç‡∂´‡∑í‡∂ö ‡∂Ü‡∑Ñ‡∑è‡∂ª' },
  {
    value: 'vegetarian',
    icon: 'Leaf',
    en: 'Vegetarian/Vegan',
    si: '‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂Ç‡∑Å/‡∑Ä‡∑ì‡∂ú‡∂±‡∑ä',
  },
];

export default function FoodStay({
  data,
  onChange,
  onNext,
  onBack,
  lang,
}: FoodStayProps) {
  const isComplete =
    data.accommodation &&
    data.accommodation.length > 0 &&
    data.food_style &&
    data.food_style.length > 0;

  const handleAccommodationToggle = (value: string) => {
    const current = data.accommodation || [];
    const updated = current.includes(value)
      ? current.filter((a) => a !== value)
      : [...current, value];
    onChange('accommodation', updated);
  };

  const handleFoodToggle = (value: string) => {
    const current = data.food_style || [];
    const updated = current.includes(value)
      ? current.filter((f) => f !== value)
      : [...current, value];
    onChange('food_style', updated);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-2xl mx-auto space-y-6 px-4 sm:px-6"
    >
      {/* Header */}
      <div className="text-center space-y-3">
        <motion.div
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6 }}
          className="flex items-center justify-center gap-2"
        >
          <motion.span
            className="text-3xl"
            animate={{ rotate: [0, 15, -15, 0] }}
            transition={{ duration: 2.5, repeat: Infinity }}
          >
            üçΩÔ∏è
          </motion.span>
          <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-teal-600 via-emerald-600 to-cyan-600 bg-clip-text text-transparent">
            {lang === 'en' ? 'Food & Stay' : '‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑É‡∑Ñ ‡∂±‡∑Ä‡∑è‡∂≠‡∑ê‡∂±'}
          </h2>
          <motion.span
            className="text-3xl"
            animate={{ scale: [1, 1.2, 1] }}
            transition={{ duration: 1.5, repeat: Infinity }}
          >
            üè®
          </motion.span>
        </motion.div>
        <p className="text-base text-gray-600">
          {lang === 'en'
            ? 'Tell us how you like to eat & sleep!'
            : '‡∂î‡∂∂ ‡∂ö‡∂±‡∑ä‡∂± ‡∑É‡∑Ñ ‡∂±‡∑í‡∂Ø‡∂±‡∑ä‡∂± ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∑Ä‡∑í‡∂Ø‡∑í‡∂∫ ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±!'}
        </p>
      </div>

      {/* Q10: Accommodation */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-700 flex items-center gap-2">
          <Hotel className="w-5 h-5 text-teal-500" />
          {lang === 'en'
            ? 'Where do you like to stay when traveling?'
            : '‡∑É‡∂Ç‡∂†‡∑è‡∂ª‡∂∫ ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß ‡∂î‡∂∂ ‡∂±‡∑Ä‡∑è‡∂≠‡∑ê‡∂±‡∑ä ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂ö‡∑ú‡∑Ñ‡∑ö‡∂Ø?'}
          <span className="text-sm text-gray-500 font-normal">
            ({lang === 'en' ? 'Select all that apply' : '‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±'})
          </span>
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {accommodations.map((acc) => (
            <Card3D
              key={acc.value}
              icon={acc.icon}
              selected={data.accommodation?.includes(acc.value)}
              onClick={() => handleAccommodationToggle(acc.value)}
            >
              {lang === 'en' ? acc.en : acc.si}
            </Card3D>
          ))}
        </div>
      </div>

      {/* Q11: Food Styles */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-700 flex items-center gap-2">
          <Utensils className="w-5 h-5 text-teal-500" />
          {lang === 'en'
            ? 'Favorite food styles while traveling:'
            : '‡∑É‡∂Ç‡∂†‡∑è‡∂ª‡∂∫ ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑Ä‡∑í‡∂Ω‡∑è‡∑É‡∂∫:'}
          <span className="text-sm text-gray-500 font-normal">
            ({lang === 'en' ? 'Select all that apply' : '‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±'})
          </span>
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {foodStyles.map((food) => (
            <Card3D
              key={food.value}
              icon={food.icon}
              selected={data.food_style?.includes(food.value)}
              onClick={() => handleFoodToggle(food.value)}
            >
              {lang === 'en' ? food.en : food.si}
            </Card3D>
          ))}
        </div>
      </div>

      {/* Navigation */}
      <div className="flex justify-between pt-6">
        <Button onClick={onBack} variant="outline" icon={<ArrowLeft />}>
          {lang === 'en' ? 'Back' : '‡∂Ü‡∂¥‡∑É‡∑î'}
        </Button>
        <Button
          onClick={onNext}
          variant="primary"
          icon={<ArrowRight />}
          disabled={!isComplete}
        >
          {lang === 'en' ? 'Continue' : '‡∂ä‡∑Ö‡∂ü'}
        </Button>
      </div>
    </motion.div>
  );
}
